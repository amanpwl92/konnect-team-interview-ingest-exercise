/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.konnect.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class NodeEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2391624272122117788L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NodeEvent\",\"namespace\":\"org.konnect.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"konnect_entity\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"labels\",\"type\":[\"null\",{\"type\":\"map\",\"values\":[\"null\",\"string\"]}],\"default\":null},{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"hostname\",\"type\":\"string\"},{\"name\":\"last_ping\",\"type\":\"long\"},{\"name\":\"created_at\",\"type\":\"long\"},{\"name\":\"updated_at\",\"type\":\"long\"},{\"name\":\"config_hash\",\"type\":[\"null\",\"string\"]},{\"name\":\"process_conf\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ProcessConf\",\"fields\":[{\"name\":\"plugins\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"string\"]}],\"default\":null},{\"name\":\"lmdb_map_size\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"router_flavor\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"cluster_max_payload\",\"type\":\"int\"}]}]},{\"name\":\"connection_state\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ConnectionState\",\"fields\":[{\"name\":\"is_connected\",\"type\":\"boolean\"}]}],\"default\":null},{\"name\":\"data_plane_cert_id\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<NodeEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<NodeEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<NodeEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<NodeEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<NodeEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this NodeEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a NodeEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a NodeEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static NodeEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence id;
  private java.lang.CharSequence konnect_entity;
  private java.lang.CharSequence type;
  private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> labels;
  private java.lang.CharSequence version;
  private java.lang.CharSequence hostname;
  private long last_ping;
  private long created_at;
  private long updated_at;
  private java.lang.CharSequence config_hash;
  private org.konnect.avro.ProcessConf process_conf;
  private org.konnect.avro.ConnectionState connection_state;
  private java.lang.CharSequence data_plane_cert_id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NodeEvent() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param konnect_entity The new value for konnect_entity
   * @param type The new value for type
   * @param labels The new value for labels
   * @param version The new value for version
   * @param hostname The new value for hostname
   * @param last_ping The new value for last_ping
   * @param created_at The new value for created_at
   * @param updated_at The new value for updated_at
   * @param config_hash The new value for config_hash
   * @param process_conf The new value for process_conf
   * @param connection_state The new value for connection_state
   * @param data_plane_cert_id The new value for data_plane_cert_id
   */
  public NodeEvent(java.lang.CharSequence id, java.lang.CharSequence konnect_entity, java.lang.CharSequence type, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> labels, java.lang.CharSequence version, java.lang.CharSequence hostname, java.lang.Long last_ping, java.lang.Long created_at, java.lang.Long updated_at, java.lang.CharSequence config_hash, org.konnect.avro.ProcessConf process_conf, org.konnect.avro.ConnectionState connection_state, java.lang.CharSequence data_plane_cert_id) {
    this.id = id;
    this.konnect_entity = konnect_entity;
    this.type = type;
    this.labels = labels;
    this.version = version;
    this.hostname = hostname;
    this.last_ping = last_ping;
    this.created_at = created_at;
    this.updated_at = updated_at;
    this.config_hash = config_hash;
    this.process_conf = process_conf;
    this.connection_state = connection_state;
    this.data_plane_cert_id = data_plane_cert_id;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return konnect_entity;
    case 2: return type;
    case 3: return labels;
    case 4: return version;
    case 5: return hostname;
    case 6: return last_ping;
    case 7: return created_at;
    case 8: return updated_at;
    case 9: return config_hash;
    case 10: return process_conf;
    case 11: return connection_state;
    case 12: return data_plane_cert_id;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: konnect_entity = (java.lang.CharSequence)value$; break;
    case 2: type = (java.lang.CharSequence)value$; break;
    case 3: labels = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 4: version = (java.lang.CharSequence)value$; break;
    case 5: hostname = (java.lang.CharSequence)value$; break;
    case 6: last_ping = (java.lang.Long)value$; break;
    case 7: created_at = (java.lang.Long)value$; break;
    case 8: updated_at = (java.lang.Long)value$; break;
    case 9: config_hash = (java.lang.CharSequence)value$; break;
    case 10: process_conf = (org.konnect.avro.ProcessConf)value$; break;
    case 11: connection_state = (org.konnect.avro.ConnectionState)value$; break;
    case 12: data_plane_cert_id = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'konnect_entity' field.
   * @return The value of the 'konnect_entity' field.
   */
  public java.lang.CharSequence getKonnectEntity() {
    return konnect_entity;
  }


  /**
   * Sets the value of the 'konnect_entity' field.
   * @param value the value to set.
   */
  public void setKonnectEntity(java.lang.CharSequence value) {
    this.konnect_entity = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'labels' field.
   * @return The value of the 'labels' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getLabels() {
    return labels;
  }


  /**
   * Sets the value of the 'labels' field.
   * @param value the value to set.
   */
  public void setLabels(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.labels = value;
  }

  /**
   * Gets the value of the 'version' field.
   * @return The value of the 'version' field.
   */
  public java.lang.CharSequence getVersion() {
    return version;
  }


  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(java.lang.CharSequence value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'hostname' field.
   * @return The value of the 'hostname' field.
   */
  public java.lang.CharSequence getHostname() {
    return hostname;
  }


  /**
   * Sets the value of the 'hostname' field.
   * @param value the value to set.
   */
  public void setHostname(java.lang.CharSequence value) {
    this.hostname = value;
  }

  /**
   * Gets the value of the 'last_ping' field.
   * @return The value of the 'last_ping' field.
   */
  public long getLastPing() {
    return last_ping;
  }


  /**
   * Sets the value of the 'last_ping' field.
   * @param value the value to set.
   */
  public void setLastPing(long value) {
    this.last_ping = value;
  }

  /**
   * Gets the value of the 'created_at' field.
   * @return The value of the 'created_at' field.
   */
  public long getCreatedAt() {
    return created_at;
  }


  /**
   * Sets the value of the 'created_at' field.
   * @param value the value to set.
   */
  public void setCreatedAt(long value) {
    this.created_at = value;
  }

  /**
   * Gets the value of the 'updated_at' field.
   * @return The value of the 'updated_at' field.
   */
  public long getUpdatedAt() {
    return updated_at;
  }


  /**
   * Sets the value of the 'updated_at' field.
   * @param value the value to set.
   */
  public void setUpdatedAt(long value) {
    this.updated_at = value;
  }

  /**
   * Gets the value of the 'config_hash' field.
   * @return The value of the 'config_hash' field.
   */
  public java.lang.CharSequence getConfigHash() {
    return config_hash;
  }


  /**
   * Sets the value of the 'config_hash' field.
   * @param value the value to set.
   */
  public void setConfigHash(java.lang.CharSequence value) {
    this.config_hash = value;
  }

  /**
   * Gets the value of the 'process_conf' field.
   * @return The value of the 'process_conf' field.
   */
  public org.konnect.avro.ProcessConf getProcessConf() {
    return process_conf;
  }


  /**
   * Sets the value of the 'process_conf' field.
   * @param value the value to set.
   */
  public void setProcessConf(org.konnect.avro.ProcessConf value) {
    this.process_conf = value;
  }

  /**
   * Gets the value of the 'connection_state' field.
   * @return The value of the 'connection_state' field.
   */
  public org.konnect.avro.ConnectionState getConnectionState() {
    return connection_state;
  }


  /**
   * Sets the value of the 'connection_state' field.
   * @param value the value to set.
   */
  public void setConnectionState(org.konnect.avro.ConnectionState value) {
    this.connection_state = value;
  }

  /**
   * Gets the value of the 'data_plane_cert_id' field.
   * @return The value of the 'data_plane_cert_id' field.
   */
  public java.lang.CharSequence getDataPlaneCertId() {
    return data_plane_cert_id;
  }


  /**
   * Sets the value of the 'data_plane_cert_id' field.
   * @param value the value to set.
   */
  public void setDataPlaneCertId(java.lang.CharSequence value) {
    this.data_plane_cert_id = value;
  }

  /**
   * Creates a new NodeEvent RecordBuilder.
   * @return A new NodeEvent RecordBuilder
   */
  public static org.konnect.avro.NodeEvent.Builder newBuilder() {
    return new org.konnect.avro.NodeEvent.Builder();
  }

  /**
   * Creates a new NodeEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new NodeEvent RecordBuilder
   */
  public static org.konnect.avro.NodeEvent.Builder newBuilder(org.konnect.avro.NodeEvent.Builder other) {
    if (other == null) {
      return new org.konnect.avro.NodeEvent.Builder();
    } else {
      return new org.konnect.avro.NodeEvent.Builder(other);
    }
  }

  /**
   * Creates a new NodeEvent RecordBuilder by copying an existing NodeEvent instance.
   * @param other The existing instance to copy.
   * @return A new NodeEvent RecordBuilder
   */
  public static org.konnect.avro.NodeEvent.Builder newBuilder(org.konnect.avro.NodeEvent other) {
    if (other == null) {
      return new org.konnect.avro.NodeEvent.Builder();
    } else {
      return new org.konnect.avro.NodeEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for NodeEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NodeEvent>
    implements org.apache.avro.data.RecordBuilder<NodeEvent> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence konnect_entity;
    private java.lang.CharSequence type;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> labels;
    private java.lang.CharSequence version;
    private java.lang.CharSequence hostname;
    private long last_ping;
    private long created_at;
    private long updated_at;
    private java.lang.CharSequence config_hash;
    private org.konnect.avro.ProcessConf process_conf;
    private org.konnect.avro.ProcessConf.Builder process_confBuilder;
    private org.konnect.avro.ConnectionState connection_state;
    private org.konnect.avro.ConnectionState.Builder connection_stateBuilder;
    private java.lang.CharSequence data_plane_cert_id;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.konnect.avro.NodeEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.konnect_entity)) {
        this.konnect_entity = data().deepCopy(fields()[1].schema(), other.konnect_entity);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.labels)) {
        this.labels = data().deepCopy(fields()[3].schema(), other.labels);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.version)) {
        this.version = data().deepCopy(fields()[4].schema(), other.version);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.hostname)) {
        this.hostname = data().deepCopy(fields()[5].schema(), other.hostname);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.last_ping)) {
        this.last_ping = data().deepCopy(fields()[6].schema(), other.last_ping);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.created_at)) {
        this.created_at = data().deepCopy(fields()[7].schema(), other.created_at);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.updated_at)) {
        this.updated_at = data().deepCopy(fields()[8].schema(), other.updated_at);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.config_hash)) {
        this.config_hash = data().deepCopy(fields()[9].schema(), other.config_hash);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.process_conf)) {
        this.process_conf = data().deepCopy(fields()[10].schema(), other.process_conf);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (other.hasProcessConfBuilder()) {
        this.process_confBuilder = org.konnect.avro.ProcessConf.newBuilder(other.getProcessConfBuilder());
      }
      if (isValidValue(fields()[11], other.connection_state)) {
        this.connection_state = data().deepCopy(fields()[11].schema(), other.connection_state);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (other.hasConnectionStateBuilder()) {
        this.connection_stateBuilder = org.konnect.avro.ConnectionState.newBuilder(other.getConnectionStateBuilder());
      }
      if (isValidValue(fields()[12], other.data_plane_cert_id)) {
        this.data_plane_cert_id = data().deepCopy(fields()[12].schema(), other.data_plane_cert_id);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
    }

    /**
     * Creates a Builder by copying an existing NodeEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(org.konnect.avro.NodeEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.konnect_entity)) {
        this.konnect_entity = data().deepCopy(fields()[1].schema(), other.konnect_entity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.labels)) {
        this.labels = data().deepCopy(fields()[3].schema(), other.labels);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.version)) {
        this.version = data().deepCopy(fields()[4].schema(), other.version);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.hostname)) {
        this.hostname = data().deepCopy(fields()[5].schema(), other.hostname);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.last_ping)) {
        this.last_ping = data().deepCopy(fields()[6].schema(), other.last_ping);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.created_at)) {
        this.created_at = data().deepCopy(fields()[7].schema(), other.created_at);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.updated_at)) {
        this.updated_at = data().deepCopy(fields()[8].schema(), other.updated_at);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.config_hash)) {
        this.config_hash = data().deepCopy(fields()[9].schema(), other.config_hash);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.process_conf)) {
        this.process_conf = data().deepCopy(fields()[10].schema(), other.process_conf);
        fieldSetFlags()[10] = true;
      }
      this.process_confBuilder = null;
      if (isValidValue(fields()[11], other.connection_state)) {
        this.connection_state = data().deepCopy(fields()[11].schema(), other.connection_state);
        fieldSetFlags()[11] = true;
      }
      this.connection_stateBuilder = null;
      if (isValidValue(fields()[12], other.data_plane_cert_id)) {
        this.data_plane_cert_id = data().deepCopy(fields()[12].schema(), other.data_plane_cert_id);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'konnect_entity' field.
      * @return The value.
      */
    public java.lang.CharSequence getKonnectEntity() {
      return konnect_entity;
    }


    /**
      * Sets the value of the 'konnect_entity' field.
      * @param value The value of 'konnect_entity'.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder setKonnectEntity(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.konnect_entity = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'konnect_entity' field has been set.
      * @return True if the 'konnect_entity' field has been set, false otherwise.
      */
    public boolean hasKonnectEntity() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'konnect_entity' field.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder clearKonnectEntity() {
      konnect_entity = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder setType(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'labels' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getLabels() {
      return labels;
    }


    /**
      * Sets the value of the 'labels' field.
      * @param value The value of 'labels'.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder setLabels(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.labels = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'labels' field has been set.
      * @return True if the 'labels' field has been set, false otherwise.
      */
    public boolean hasLabels() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'labels' field.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder clearLabels() {
      labels = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * @return The value.
      */
    public java.lang.CharSequence getVersion() {
      return version;
    }


    /**
      * Sets the value of the 'version' field.
      * @param value The value of 'version'.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder setVersion(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.version = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'version' field.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder clearVersion() {
      version = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'hostname' field.
      * @return The value.
      */
    public java.lang.CharSequence getHostname() {
      return hostname;
    }


    /**
      * Sets the value of the 'hostname' field.
      * @param value The value of 'hostname'.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder setHostname(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.hostname = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'hostname' field has been set.
      * @return True if the 'hostname' field has been set, false otherwise.
      */
    public boolean hasHostname() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'hostname' field.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder clearHostname() {
      hostname = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'last_ping' field.
      * @return The value.
      */
    public long getLastPing() {
      return last_ping;
    }


    /**
      * Sets the value of the 'last_ping' field.
      * @param value The value of 'last_ping'.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder setLastPing(long value) {
      validate(fields()[6], value);
      this.last_ping = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'last_ping' field has been set.
      * @return True if the 'last_ping' field has been set, false otherwise.
      */
    public boolean hasLastPing() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'last_ping' field.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder clearLastPing() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'created_at' field.
      * @return The value.
      */
    public long getCreatedAt() {
      return created_at;
    }


    /**
      * Sets the value of the 'created_at' field.
      * @param value The value of 'created_at'.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder setCreatedAt(long value) {
      validate(fields()[7], value);
      this.created_at = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'created_at' field has been set.
      * @return True if the 'created_at' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'created_at' field.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder clearCreatedAt() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'updated_at' field.
      * @return The value.
      */
    public long getUpdatedAt() {
      return updated_at;
    }


    /**
      * Sets the value of the 'updated_at' field.
      * @param value The value of 'updated_at'.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder setUpdatedAt(long value) {
      validate(fields()[8], value);
      this.updated_at = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'updated_at' field has been set.
      * @return True if the 'updated_at' field has been set, false otherwise.
      */
    public boolean hasUpdatedAt() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'updated_at' field.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder clearUpdatedAt() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'config_hash' field.
      * @return The value.
      */
    public java.lang.CharSequence getConfigHash() {
      return config_hash;
    }


    /**
      * Sets the value of the 'config_hash' field.
      * @param value The value of 'config_hash'.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder setConfigHash(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.config_hash = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'config_hash' field has been set.
      * @return True if the 'config_hash' field has been set, false otherwise.
      */
    public boolean hasConfigHash() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'config_hash' field.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder clearConfigHash() {
      config_hash = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'process_conf' field.
      * @return The value.
      */
    public org.konnect.avro.ProcessConf getProcessConf() {
      return process_conf;
    }


    /**
      * Sets the value of the 'process_conf' field.
      * @param value The value of 'process_conf'.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder setProcessConf(org.konnect.avro.ProcessConf value) {
      validate(fields()[10], value);
      this.process_confBuilder = null;
      this.process_conf = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'process_conf' field has been set.
      * @return True if the 'process_conf' field has been set, false otherwise.
      */
    public boolean hasProcessConf() {
      return fieldSetFlags()[10];
    }

    /**
     * Gets the Builder instance for the 'process_conf' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.konnect.avro.ProcessConf.Builder getProcessConfBuilder() {
      if (process_confBuilder == null) {
        if (hasProcessConf()) {
          setProcessConfBuilder(org.konnect.avro.ProcessConf.newBuilder(process_conf));
        } else {
          setProcessConfBuilder(org.konnect.avro.ProcessConf.newBuilder());
        }
      }
      return process_confBuilder;
    }

    /**
     * Sets the Builder instance for the 'process_conf' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.konnect.avro.NodeEvent.Builder setProcessConfBuilder(org.konnect.avro.ProcessConf.Builder value) {
      clearProcessConf();
      process_confBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'process_conf' field has an active Builder instance
     * @return True if the 'process_conf' field has an active Builder instance
     */
    public boolean hasProcessConfBuilder() {
      return process_confBuilder != null;
    }

    /**
      * Clears the value of the 'process_conf' field.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder clearProcessConf() {
      process_conf = null;
      process_confBuilder = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'connection_state' field.
      * @return The value.
      */
    public org.konnect.avro.ConnectionState getConnectionState() {
      return connection_state;
    }


    /**
      * Sets the value of the 'connection_state' field.
      * @param value The value of 'connection_state'.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder setConnectionState(org.konnect.avro.ConnectionState value) {
      validate(fields()[11], value);
      this.connection_stateBuilder = null;
      this.connection_state = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'connection_state' field has been set.
      * @return True if the 'connection_state' field has been set, false otherwise.
      */
    public boolean hasConnectionState() {
      return fieldSetFlags()[11];
    }

    /**
     * Gets the Builder instance for the 'connection_state' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.konnect.avro.ConnectionState.Builder getConnectionStateBuilder() {
      if (connection_stateBuilder == null) {
        if (hasConnectionState()) {
          setConnectionStateBuilder(org.konnect.avro.ConnectionState.newBuilder(connection_state));
        } else {
          setConnectionStateBuilder(org.konnect.avro.ConnectionState.newBuilder());
        }
      }
      return connection_stateBuilder;
    }

    /**
     * Sets the Builder instance for the 'connection_state' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.konnect.avro.NodeEvent.Builder setConnectionStateBuilder(org.konnect.avro.ConnectionState.Builder value) {
      clearConnectionState();
      connection_stateBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'connection_state' field has an active Builder instance
     * @return True if the 'connection_state' field has an active Builder instance
     */
    public boolean hasConnectionStateBuilder() {
      return connection_stateBuilder != null;
    }

    /**
      * Clears the value of the 'connection_state' field.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder clearConnectionState() {
      connection_state = null;
      connection_stateBuilder = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'data_plane_cert_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getDataPlaneCertId() {
      return data_plane_cert_id;
    }


    /**
      * Sets the value of the 'data_plane_cert_id' field.
      * @param value The value of 'data_plane_cert_id'.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder setDataPlaneCertId(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.data_plane_cert_id = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'data_plane_cert_id' field has been set.
      * @return True if the 'data_plane_cert_id' field has been set, false otherwise.
      */
    public boolean hasDataPlaneCertId() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'data_plane_cert_id' field.
      * @return This builder.
      */
    public org.konnect.avro.NodeEvent.Builder clearDataPlaneCertId() {
      data_plane_cert_id = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public NodeEvent build() {
      try {
        NodeEvent record = new NodeEvent();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.konnect_entity = fieldSetFlags()[1] ? this.konnect_entity : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.type = fieldSetFlags()[2] ? this.type : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.labels = fieldSetFlags()[3] ? this.labels : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[3]);
        record.version = fieldSetFlags()[4] ? this.version : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.hostname = fieldSetFlags()[5] ? this.hostname : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.last_ping = fieldSetFlags()[6] ? this.last_ping : (java.lang.Long) defaultValue(fields()[6]);
        record.created_at = fieldSetFlags()[7] ? this.created_at : (java.lang.Long) defaultValue(fields()[7]);
        record.updated_at = fieldSetFlags()[8] ? this.updated_at : (java.lang.Long) defaultValue(fields()[8]);
        record.config_hash = fieldSetFlags()[9] ? this.config_hash : (java.lang.CharSequence) defaultValue(fields()[9]);
        if (process_confBuilder != null) {
          try {
            record.process_conf = this.process_confBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("process_conf"));
            throw e;
          }
        } else {
          record.process_conf = fieldSetFlags()[10] ? this.process_conf : (org.konnect.avro.ProcessConf) defaultValue(fields()[10]);
        }
        if (connection_stateBuilder != null) {
          try {
            record.connection_state = this.connection_stateBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("connection_state"));
            throw e;
          }
        } else {
          record.connection_state = fieldSetFlags()[11] ? this.connection_state : (org.konnect.avro.ConnectionState) defaultValue(fields()[11]);
        }
        record.data_plane_cert_id = fieldSetFlags()[12] ? this.data_plane_cert_id : (java.lang.CharSequence) defaultValue(fields()[12]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<NodeEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<NodeEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<NodeEvent>
    READER$ = (org.apache.avro.io.DatumReader<NodeEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










